#+TITLE: Orangesoda

[[file:sitemap.org][Sitemap]] and [[file:license.org][License]]. Everything on this site falls under the license
unless otherwise noted.

* Emacs
** SRFI-1 List Utilities
   by [[file:lang.org][Lang]] [2009-12-07 Mon]

   Emacs-lisp implementations of a few functions from [[http://srfi.schemers.org/srfi-1/srfi-1.html][SRFI-1]]. I've
   also included intersperse, which is useful for string manipulation.

** SRFI-2 =and-let*=
   <<SRFI-2.el>> by [[file:lang.org][Lang]]. [2009-07-17 Fri]

   An emacs-lisp implementation of [[http://srfi.schemers.org/srfi-2/][SRFI-2]], [[./emacs-lisp/srfi-2.el][srfi-2.el]]. =and-let*= is a
   combination of =and= and =let=, which (optionally) binds the result
   of each form in the let block. It stops on the first false result,
   and executes the body only if all the forms are true.

#+BEGIN_SRC emacs-lisp
(and-let* ((val (member 'foo '(a b c foo d e)))
           ((listp val))
           (val (car val)))
  val)
#+END_SRC

   If =foo= was not found in the list, the form would return false
   rather than raising an error.

** html-script.el
   by [[file:lang.org][Lang]]. [2009-10-07 Wed]

   My version of [[./emacs-lisp/html-script.el][html-script.el]]. This code is originally from
   [[http://www.dur.ac.uk/p.j.heslin/Software/Emacs/]], and is a
   simplified alternative to the various multi-modes.

   Using the region definitions (each a list of starting regexp,
   ending regexp, and mode symbols) the keystroke (by default =F12=)
   will narrow to the region and invoke the first bound function.
   =F12= a second time will widen the buffer and return to HTML mode.

   I hacked up the code a bit to exclude the text matched by the
   starting and ending expressions. =js2-mode= flags any invalid
   syntax, and the script tags are certainly that. This seems like a
   workable solution for mixed javascript, at least until =js2-mode=
   can play nicely with multi-modes.

* Javascript
** Fluid Bindings (aka Dynamic Scoping, aka Parameters)
   <<fluid.js>> by [[file:lang.org][Lang]]. [2009-07-17 Fri]

   Fluid bindings follow the flow of control rather than the lexical
   order of a program. See wikipedia on [[http://en.wikipedia.org/wiki/Scope_%28programming%29#Dynamic_scoping][Dynamic Scoping]].

   The code: [[./javascript/fluid.js][fluid.js]].

** jquery.dataset: HTML5 Dataset jQuery Plugin
   Posted by [[Ben]] on [2009-09-08 Tue].

   The HTML5 specification allows [[http://dev.w3.org/html5/spec/Overview.html#attr-data][custom data attributes]] to be added
   to any DOM element.  This jQuery plugin provides methods to
   retrieve and manipulate custom attributes.

   Read More: [[./jquery.dataset.org][The jquery.dataset Plugin]]

   Download: [[./javascript/jquery.dataset.js][jquery.dataset.js]]

* Scheme
** A =REQUIRE= special form for Gambit-C
Posted by [[Ben]] on [2009-07-22 Wed].

The =REQUIRE= special form includes libraries only once.  It is
implemented using [[http://www.iro.umontreal.ca/~gambit/][Gambit-C]]'s =INCLUDE= and =LOAD= forms with
=COND-EXPAND= to prevent a library from being loaded again (which is
an error) or re-evaluated.

=REQUIRE= accepts a sequence of requirement specifications that
identify libraries.  The specifications are mapped onto the filesystem
to find the corresponding source files or compiled modules.  For
example:

#+BEGIN_SRC scheme
(require (srfi 1)
         (lib util))

;; Library code here...
#+END_SRC

See [[http://github.com/weaver/gambit-prelude/blob/master/require%23.scm][require#.scm]] for additional documentation.  An easy way to
integrate =REQUIRE= into a project is to include [[http://github.com/weaver/gambit-prelude/blob/master/require%23.scm][require#.scm]] from
`.gambcini' or `~/.gambcini'.  For more details, see [[http://www.iro.umontreal.ca/~gambit/doc/gambit-c.html#Customization-1][Customization]] in
the Gambit-C documentation.

Source: [[http://github.com/weaver/gambit-prelude/blob/master/require%23.scm][require#.scm]] [[http://github.com/weaver/gambit-prelude/blob/master/_require.scm][_require.scm]]

* Contributers
** <<Ben>> Weaver

   [[http://benweaver.com/][Ben]] lives in Chattanooga TN and works at [[http://thisismedium.com/][Medium]].  You can follow
   him on [[http://twitter.com/bwvr][Twitter]], see code on [[http://github.com/weaver][github]], or send an email to
   [his-first-name] at orangesoda.net.

** <<Lang>> Martin
   [[file:lang.org][Lang Martin]] also lives in Chattanooga.

* Wibler.com
  Wibler email & apps are hosted by Google:
  - [[http://mail.google.com/a/wibler.com/][email]]
  - [[http://www.google.com/calendar/a/wibler.com/][calendar]]


